@model ReserveNamespaceViewModel
@{
    ViewBag.Title = "Index";
}

<section>
    <article id="stage">
        <div class="message" style="display: none" data-bind="text: message, visible: message"></div>
        <h2>Reserve Namespace</h2>
        <form>
            <input type="text" placeholder="Search for a prefix" autocomplete="off" autofocus style="width: 128ch;" data-bind="value: prefixSearchQuery" />
            <input type="button" value="Search Prefix" title="Search Prefix" data-bind="click: prefixSearch" />
        </form><br />

        <div data-bind="visible: prefixSearchResults().length > 0">
            @using (Html.BeginForm())
            {
                <div>
                    <table id="prefixSearchResults" class="sexy-table">
                        <thead>
                            <tr>
                                <th>Prefix</th>
                            </tr>
                        </thead>
                        <tbody id="prefixes" data-bind="foreach: prefixSearchResults">
                            <tr>
                                <td><span data-bind="text: Prefix"></span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            }
        </div>
</article>
</section>

@section BottomScripts {
    <script src="@Url.Content("~/Scripts/knockout-2.2.1.js")"></script>
    <script>
        $(document).ready(function() {
            var viewModel = function () {
                var $self = this;

                this.message = ko.observable('');
                this.searchQuery = ko.observable('');

                this.prefixSearchResults = ko.observableArray([]);
                this.prefixSearchNotFoundResults = ko.observableArray([]);

                this.prefixSearch = function () {
                    $self.message("");
                    $.ajax({
                        url: '@Url.Action("SearchPrefix", "ReserveNamespace", new {area = "Admin"})?query=' + encodeURIComponent($self.prefixSearchQuery()),
                        cache: false,
                        dataType: 'json',
                        success: function (data) {
                            $self.prefixSearchResults.removeAll();
                            $self.searchNotFoundResults.removeAll();

                            $self.prefixSearchResults(data.Prefixes);
                            $self.prefixSearchNotFoundResults(data.UsersNotFound);
                        }
                    })
                    .error(function(jqXhr, textStatus, errorThrown) {
                        alert("Error: " + errorThrown);
                    });
                };

                this.generateValue = function (user, subscription) {
                    return JSON.stringify({ "u": user.Username, "g": subscription, "v": user.Selected[subscription]() })
                };

                this.generateUserUrl = function (user) {
                    return '/profiles/' + user.Username;
                };

            };

            ko.applyBindings(new viewModel(), $('#stage').get(0));
        });
    </script>
}